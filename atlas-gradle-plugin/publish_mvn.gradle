//是否需要把项目发送到远程maven库
ext.publishToRemote = true
ext.publishDefaultArtifact = true
ext.publishApk = false
ext.isApplication = false

if (!project.getBuildFile().exists()) {
    return;
}

def versionFile = new File(project.getRootDir(), "version.properties");
HashMap<String, String> versionMap = new HashMap<String, String>();
if (versionFile.exists()) {
    versionFile.eachLine { line ->
        String[] arr = line.split(".version=");
        if (arr.length == 2) {
            StringBuilder b = new StringBuilder(arr[0]);
            b.replace(arr[0].lastIndexOf("."), arr[0].lastIndexOf(".") + 1, ":");
            versionMap.put(b.toString(), arr[1])
        }
    }
}




apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'maven-publish'

configurations {
    providedCompile
    compile.extendsFrom providedCompile
}

configurations.all {
    resolutionStrategy.cacheDynamicVersionsFor 0, 'seconds'
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
    resolutionStrategy {
        for (String key : versionMap.keySet()) {
            force(key + ":" + versionMap.get(key))
        }
    }
}

repositories {
    mavenLocal()
    jcenter()
}


if (!project.getRootProject().hasProperty("aarMap")) {
    project.getRootProject().ext.set("aarMap", new HashSet<String>())
}

def deployVersion = System.getProperty('deployVersion')
def mtlVersion = System.getenv("MUPP_VERSION_NAME");

project.afterEvaluate {
    tasks.whenTaskAdded { task ->
        if (task.name.startsWith("generatePomFileForMavenPublication")) {
            task.mustRunAfter(project.getTasks().withType(Zip.class))
        }
    }

}


task sourcesJar(type: Jar) {
    from sourceSets.main.allJava

    archiveClassifier = 'sources'
}


//task javadocJar(type: Jar) {
//    from javadoc
//    archiveClassifier = 'javadoc'
//}


publishing {

    if (null != deployVersion) {
        version = deployVersion
    } else if (null != mtlVersion) {
        version = mtlVersion
    }

    publications {
        maven(MavenPublication) {

                from components.java
                artifact sourcesJar

            pom.withXml {
                asNode().dependencies.'*'.each {
                    if (it.scope.text() == 'runtime') {
                            it.scope*.value = 'compile'
                    }
                }
            }

        }
    }

    repositories {
        mavenLocal()
        maven {
            def releasesRepoUrl = "http://mvnrepo.alibaba-inc.com/nexus/content/repositories/snapshots"
            def snapshotsRepoUrl = "http://mvnrepo.alibaba-inc.com/nexus/content/repositories/releases"
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            credentials {
                username = 'snapshotsAdmin'
                password = '123456'
            }
        }

    }
}

